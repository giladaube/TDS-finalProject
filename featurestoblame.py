# -*- coding: utf-8 -*-
"""FeaturesToBlame.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qMmk5Rb8HHKlgQgmlREb-m2TqkcvwFeN
"""

from fitter import Fitter
import pandas as pd

# find best distribution to given data, from a list of distributions
def findDistribution(data, distributions_opt):
  f = Fitter(data, timeout=30, distributions=distributions_opt)
  f.fit()
  # f.summary()
  return f.get_best(method = 'sumsquare_error')


class FeaturesToBlame:
  def __init__(self, before, after, distributions):
    self.before = before
    self.after = after
    self.distributions = distributions
    self.FTB = {}
    
  # Compare distributions for each fearure, before and after drift
  def compareDistribution(self):
    for feature_name in self.before.columns:
      # data for $feature before drift
      beforeD = self.before[feature_name].values
      distributionBefore, values = findDistribution(beforeD, self.distributions).popitem()
      
      # data for same $feature after drift
      afterD = self.after[feature_name].values
      distributionAfter, values = findDistribution(afterD, self.distributions).popitem()
      
      if distributionBefore != distributionAfter:
        self.FTB[feature_name] = [distributionBefore, distributionAfter]

  # return a list of all features to blame and distributions
  def getFeaturesToBlame(self):
    print(f'** Features to Blame **')
    if len(self.FTB) > 0:
      print(f'We found {len(self.FTB)} features to blame:')
    else:
      print(f'We found no features to blame on this drift.')
    
    before = []
    after = []

    for feature in self.FTB:
      before.append(self.FTB.get(feature)[0])
      after.append(self.FTB.get(feature)[1])
    data = {'feature': self.FTB.keys(), 'before': before, 'after': after}
    results = pd.DataFrame(data=data)
    return self.FTB, results